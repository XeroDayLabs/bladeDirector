//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bladeDirector.bootMenuWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="bootMenuWCF.IBootMenuWCF")]
    public interface IBootMenuWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBootMenuWCF/addMachine", ReplyAction="http://tempuri.org/IBootMenuWCF/addMachineResponse")]
        void addMachine(string IloIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBootMenuWCF/addMachine", ReplyAction="http://tempuri.org/IBootMenuWCF/addMachineResponse")]
        System.Threading.Tasks.Task addMachineAsync(string IloIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBootMenuWCF/removeMachine", ReplyAction="http://tempuri.org/IBootMenuWCF/removeMachineResponse")]
        void removeMachine(string IloIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBootMenuWCF/removeMachine", ReplyAction="http://tempuri.org/IBootMenuWCF/removeMachineResponse")]
        System.Threading.Tasks.Task removeMachineAsync(string IloIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBootMenuWCF/test", ReplyAction="http://tempuri.org/IBootMenuWCF/testResponse")]
        System.IO.Stream test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBootMenuWCF/test", ReplyAction="http://tempuri.org/IBootMenuWCF/testResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> testAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBootMenuWCFChannel : bladeDirector.bootMenuWCF.IBootMenuWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BootMenuWCFClient : System.ServiceModel.ClientBase<bladeDirector.bootMenuWCF.IBootMenuWCF>, bladeDirector.bootMenuWCF.IBootMenuWCF {
        
        public BootMenuWCFClient() {
        }
        
        public BootMenuWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BootMenuWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BootMenuWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BootMenuWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void addMachine(string IloIP) {
            base.Channel.addMachine(IloIP);
        }
        
        public System.Threading.Tasks.Task addMachineAsync(string IloIP) {
            return base.Channel.addMachineAsync(IloIP);
        }
        
        public void removeMachine(string IloIP) {
            base.Channel.removeMachine(IloIP);
        }
        
        public System.Threading.Tasks.Task removeMachineAsync(string IloIP) {
            return base.Channel.removeMachineAsync(IloIP);
        }
        
        public System.IO.Stream test() {
            return base.Channel.test();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> testAsync() {
            return base.Channel.testAsync();
        }
    }
}
