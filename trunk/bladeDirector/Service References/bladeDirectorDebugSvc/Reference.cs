//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bladeDirector.bladeDirectorDebugSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="bladeSpec", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class bladeSpec : bladeDirector.bladeDirectorDebugSvc.bladeOwnership {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ESXiPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ESXiUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> bladeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string bladeIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool currentlyBeingAVMServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool currentlyHavingBIOSDeployedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iLOIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort iLOPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iLoPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iLoUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iscsiIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastDeployedBIOSField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ESXiPassword {
            get {
                return this.ESXiPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.ESXiPasswordField, value) != true)) {
                    this.ESXiPasswordField = value;
                    this.RaisePropertyChanged("ESXiPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ESXiUsername {
            get {
                return this.ESXiUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.ESXiUsernameField, value) != true)) {
                    this.ESXiUsernameField = value;
                    this.RaisePropertyChanged("ESXiUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> bladeID {
            get {
                return this.bladeIDField;
            }
            set {
                if ((this.bladeIDField.Equals(value) != true)) {
                    this.bladeIDField = value;
                    this.RaisePropertyChanged("bladeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string bladeIP {
            get {
                return this.bladeIPField;
            }
            set {
                if ((object.ReferenceEquals(this.bladeIPField, value) != true)) {
                    this.bladeIPField = value;
                    this.RaisePropertyChanged("bladeIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool currentlyBeingAVMServer {
            get {
                return this.currentlyBeingAVMServerField;
            }
            set {
                if ((this.currentlyBeingAVMServerField.Equals(value) != true)) {
                    this.currentlyBeingAVMServerField = value;
                    this.RaisePropertyChanged("currentlyBeingAVMServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool currentlyHavingBIOSDeployed {
            get {
                return this.currentlyHavingBIOSDeployedField;
            }
            set {
                if ((this.currentlyHavingBIOSDeployedField.Equals(value) != true)) {
                    this.currentlyHavingBIOSDeployedField = value;
                    this.RaisePropertyChanged("currentlyHavingBIOSDeployed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iLOIP {
            get {
                return this.iLOIPField;
            }
            set {
                if ((object.ReferenceEquals(this.iLOIPField, value) != true)) {
                    this.iLOIPField = value;
                    this.RaisePropertyChanged("iLOIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort iLOPort {
            get {
                return this.iLOPortField;
            }
            set {
                if ((this.iLOPortField.Equals(value) != true)) {
                    this.iLOPortField = value;
                    this.RaisePropertyChanged("iLOPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iLoPassword {
            get {
                return this.iLoPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.iLoPasswordField, value) != true)) {
                    this.iLoPasswordField = value;
                    this.RaisePropertyChanged("iLoPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iLoUsername {
            get {
                return this.iLoUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.iLoUsernameField, value) != true)) {
                    this.iLoUsernameField = value;
                    this.RaisePropertyChanged("iLoUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iscsiIP {
            get {
                return this.iscsiIPField;
            }
            set {
                if ((object.ReferenceEquals(this.iscsiIPField, value) != true)) {
                    this.iscsiIPField = value;
                    this.RaisePropertyChanged("iscsiIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastDeployedBIOS {
            get {
                return this.lastDeployedBIOSField;
            }
            set {
                if ((object.ReferenceEquals(this.lastDeployedBIOSField, value) != true)) {
                    this.lastDeployedBIOSField = value;
                    this.RaisePropertyChanged("lastDeployedBIOS");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="bladeOwnership", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeSpec))]
    public partial class bladeOwnership : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.VMDeployStatus VMDeployStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.SQLiteConnection connField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentSnapshotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime lastKeepAliveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nextOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> ownershipRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessWriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.bladeStatus stateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.VMDeployStatus VMDeployState {
            get {
                return this.VMDeployStateField;
            }
            set {
                if ((this.VMDeployStateField.Equals(value) != true)) {
                    this.VMDeployStateField = value;
                    this.RaisePropertyChanged("VMDeployState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.SQLiteConnection conn {
            get {
                return this.connField;
            }
            set {
                if ((object.ReferenceEquals(this.connField, value) != true)) {
                    this.connField = value;
                    this.RaisePropertyChanged("conn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currentOwner {
            get {
                return this.currentOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.currentOwnerField, value) != true)) {
                    this.currentOwnerField = value;
                    this.RaisePropertyChanged("currentOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currentSnapshot {
            get {
                return this.currentSnapshotField;
            }
            set {
                if ((object.ReferenceEquals(this.currentSnapshotField, value) != true)) {
                    this.currentSnapshotField = value;
                    this.RaisePropertyChanged("currentSnapshot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime lastKeepAlive {
            get {
                return this.lastKeepAliveField;
            }
            set {
                if ((this.lastKeepAliveField.Equals(value) != true)) {
                    this.lastKeepAliveField = value;
                    this.RaisePropertyChanged("lastKeepAlive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nextOwner {
            get {
                return this.nextOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.nextOwnerField, value) != true)) {
                    this.nextOwnerField = value;
                    this.RaisePropertyChanged("nextOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> ownershipRowID {
            get {
                return this.ownershipRowIDField;
            }
            set {
                if ((this.ownershipRowIDField.Equals(value) != true)) {
                    this.ownershipRowIDField = value;
                    this.RaisePropertyChanged("ownershipRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessRead {
            get {
                return this.permittedAccessReadField;
            }
            set {
                if ((this.permittedAccessReadField.Equals(value) != true)) {
                    this.permittedAccessReadField = value;
                    this.RaisePropertyChanged("permittedAccessRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessWrite {
            get {
                return this.permittedAccessWriteField;
            }
            set {
                if ((this.permittedAccessWriteField.Equals(value) != true)) {
                    this.permittedAccessWriteField = value;
                    this.RaisePropertyChanged("permittedAccessWrite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.bladeStatus state {
            get {
                return this.stateField;
            }
            set {
                if ((this.stateField.Equals(value) != true)) {
                    this.stateField = value;
                    this.RaisePropertyChanged("state");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SQLiteConnection", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SQLite")]
    [System.SerializableAttribute()]
    public partial class SQLiteConnection : bladeDirector.bladeDirectorDebugSvc.DbConnection {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BusyTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bladeDirector.bladeDirectorDebugSvc.DbType> DefaultDbTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DefaultTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.SQLiteConnectionFlags FlagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ParseViaFrameworkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrepareRetriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProgressOpsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VfsNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusyTimeout {
            get {
                return this.BusyTimeoutField;
            }
            set {
                if ((this.BusyTimeoutField.Equals(value) != true)) {
                    this.BusyTimeoutField = value;
                    this.RaisePropertyChanged("BusyTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bladeDirector.bladeDirectorDebugSvc.DbType> DefaultDbType {
            get {
                return this.DefaultDbTypeField;
            }
            set {
                if ((this.DefaultDbTypeField.Equals(value) != true)) {
                    this.DefaultDbTypeField = value;
                    this.RaisePropertyChanged("DefaultDbType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DefaultTimeout {
            get {
                return this.DefaultTimeoutField;
            }
            set {
                if ((this.DefaultTimeoutField.Equals(value) != true)) {
                    this.DefaultTimeoutField = value;
                    this.RaisePropertyChanged("DefaultTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultTypeName {
            get {
                return this.DefaultTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultTypeNameField, value) != true)) {
                    this.DefaultTypeNameField = value;
                    this.RaisePropertyChanged("DefaultTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.SQLiteConnectionFlags Flags {
            get {
                return this.FlagsField;
            }
            set {
                if ((this.FlagsField.Equals(value) != true)) {
                    this.FlagsField = value;
                    this.RaisePropertyChanged("Flags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ParseViaFramework {
            get {
                return this.ParseViaFrameworkField;
            }
            set {
                if ((this.ParseViaFrameworkField.Equals(value) != true)) {
                    this.ParseViaFrameworkField = value;
                    this.RaisePropertyChanged("ParseViaFramework");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrepareRetries {
            get {
                return this.PrepareRetriesField;
            }
            set {
                if ((this.PrepareRetriesField.Equals(value) != true)) {
                    this.PrepareRetriesField = value;
                    this.RaisePropertyChanged("PrepareRetries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProgressOps {
            get {
                return this.ProgressOpsField;
            }
            set {
                if ((this.ProgressOpsField.Equals(value) != true)) {
                    this.ProgressOpsField = value;
                    this.RaisePropertyChanged("ProgressOps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VfsName {
            get {
                return this.VfsNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VfsNameField, value) != true)) {
                    this.VfsNameField = value;
                    this.RaisePropertyChanged("VfsName");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMDeployStatus", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum VMDeployStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        needsPowerCycle = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        readyForDeployment = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="bladeLockType", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum bladeLockType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockAll = 65535,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockVMCreation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockBIOS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockSnapshot = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockNASOperations = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockOwnership = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockVMDeployState = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockIPAddresses = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockVirtualHW = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockLongRunningBIOS = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lockNone = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="bladeStatus", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum bladeStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        unused = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        releaseRequested = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        inUseByDirector = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        inUse = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarshalByRefObject", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.Component))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.DbConnection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.SQLiteConnection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeSpec[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeSpec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeOwnership))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.VMDeployStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeLockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.mockedExecutionResponses))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultAndBladeName))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.GetBladeStatusResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.VMHardwareSpec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.VMSoftwareSpec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.SQLiteConnectionFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.DbType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.mockedCall[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.mockedCall))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.userAddRequest[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.userAddRequest))]
    public partial class MarshalByRefObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object @__identityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public object @__identity {
            get {
                return this.@__identityField;
            }
            set {
                if ((object.ReferenceEquals(this.@__identityField, value) != true)) {
                    this.@__identityField = value;
                    this.RaisePropertyChanged("__identity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Component", Namespace="http://schemas.datacontract.org/2004/07/System.ComponentModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.DbConnection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.SQLiteConnection))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeSpec[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeSpec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeOwnership))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.VMDeployStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeLockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.bladeStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.mockedExecutionResponses))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultAndBladeName))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.GetBladeStatusResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.VMHardwareSpec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.VMSoftwareSpec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.SQLiteConnectionFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.MarshalByRefObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.DbType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.mockedCall[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.mockedCall))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.userAddRequest[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.userAddRequest))]
    public partial class Component : bladeDirector.bladeDirectorDebugSvc.MarshalByRefObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object SiteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Site {
            get {
                return this.SiteField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteField, value) != true)) {
                    this.SiteField = value;
                    this.RaisePropertyChanged("Site");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbConnection", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.SQLiteConnection))]
    public partial class DbConnection : bladeDirector.bladeDirectorDebugSvc.Component {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionStringField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultAndWaitToken", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bladeDirector.bladeDirectorDebugSvc.resultAndBladeName))]
    public partial class resultAndWaitToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.result resultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string waitTokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.result result {
            get {
                return this.resultField;
            }
            set {
                if ((object.ReferenceEquals(this.resultField, value) != true)) {
                    this.resultField = value;
                    this.RaisePropertyChanged("result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string waitToken {
            get {
                return this.waitTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.waitTokenField, value) != true)) {
                    this.waitTokenField = value;
                    this.RaisePropertyChanged("waitToken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="result", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.resultCode codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string errMsgField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.resultCode code {
            get {
                return this.codeField;
            }
            set {
                if ((this.codeField.Equals(value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errMsg {
            get {
                return this.errMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.errMsgField, value) != true)) {
                    this.errMsgField = value;
                    this.RaisePropertyChanged("errMsg");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultCode", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum resultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeInUse = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeQueueFull = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pending = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        alreadyInProgress = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cancelled = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        genericFail = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        noNeedLah = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        unknown = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="mockedExecutionResponses", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum mockedExecutionResponses : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        successful = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        successfulButSlow = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultAndBladeName", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class resultAndBladeName : bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string bladeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string bladeName {
            get {
                return this.bladeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.bladeNameField, value) != true)) {
                    this.bladeNameField = value;
                    this.RaisePropertyChanged("bladeName");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetBladeStatusResult", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum GetBladeStatusResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeNotFound = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        unused = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        yours = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        releasePending = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        notYours = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMHardwareSpec", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class VMHardwareSpec : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cpuCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int memoryMBField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cpuCount {
            get {
                return this.cpuCountField;
            }
            set {
                if ((this.cpuCountField.Equals(value) != true)) {
                    this.cpuCountField = value;
                    this.RaisePropertyChanged("cpuCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int memoryMB {
            get {
                return this.memoryMBField;
            }
            set {
                if ((this.memoryMBField.Equals(value) != true)) {
                    this.memoryMBField = value;
                    this.RaisePropertyChanged("memoryMB");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMSoftwareSpec", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class VMSoftwareSpec : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string debuggerHostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string debuggerKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort debuggerPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bladeDirector.bladeDirectorDebugSvc.userAddRequest[] usersToAddField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string debuggerHost {
            get {
                return this.debuggerHostField;
            }
            set {
                if ((object.ReferenceEquals(this.debuggerHostField, value) != true)) {
                    this.debuggerHostField = value;
                    this.RaisePropertyChanged("debuggerHost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string debuggerKey {
            get {
                return this.debuggerKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.debuggerKeyField, value) != true)) {
                    this.debuggerKeyField = value;
                    this.RaisePropertyChanged("debuggerKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort debuggerPort {
            get {
                return this.debuggerPortField;
            }
            set {
                if ((this.debuggerPortField.Equals(value) != true)) {
                    this.debuggerPortField = value;
                    this.RaisePropertyChanged("debuggerPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bladeDirector.bladeDirectorDebugSvc.userAddRequest[] usersToAdd {
            get {
                return this.usersToAddField;
            }
            set {
                if ((object.ReferenceEquals(this.usersToAddField, value) != true)) {
                    this.usersToAddField = value;
                    this.RaisePropertyChanged("usersToAdd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="SQLiteConnectionFlags", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SQLite")]
    public enum SQLiteConnectionFlags : long {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogPrepare = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogPreBind = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogBind = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogCallbackException = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogBackup = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoExtensionFunctions = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BindUInt32AsInt64 = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BindAllAsText = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetAllAsText = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoLoadExtension = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoCreateModule = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoBindFunctions = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoLogModule = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogModuleError = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogModuleException = 16384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TraceWarning = 32768,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertInvariantText = 65536,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BindInvariantText = 131072,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoConnectionPool = 262144,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseConnectionPool = 524288,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseConnectionTypes = 1048576,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoGlobalTypes = 2097152,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StickyHasRows = 4194304,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StrictEnlistment = 8388608,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MapIsolationLevels = 16777216,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DetectTextAffinity = 33554432,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DetectStringType = 67108864,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoConvertSettings = 134217728,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BindDateTimeWithKind = 268435456,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RollbackOnException = 536870912,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DenyOnException = 1073741824,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InterruptOnException = 2147483648,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnbindFunctionsOnClose = 4294967296,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoVerifyTextAffinity = 8589934592,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseConnectionBindValueCallbacks = 17179869184,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseConnectionReadValueCallbacks = 34359738368,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseParameterNameForTypeName = 68719476736,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseParameterDbTypeForTypeName = 137438953472,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoVerifyTypeAffinity = 274877906944,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowNestedTransactions = 549755813888,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BindAndGetAllAsText = 384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertAndBindInvariantText = 196608,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BindAndGetAllAsInvariantText = 131456,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertAndBindAndGetAllAsInvariantText = 196992,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseConnectionAllValueCallbacks = 51539607552,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseParameterAnythingForTypeName = 206158430208,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogAll = 24607,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 16392,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DefaultAndLogAll = 24607,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbType", Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    public enum DbType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AnsiString = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Binary = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Byte = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Boolean = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Currency = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Date = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateTime = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Decimal = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Double = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Guid = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Int16 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Int32 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Int64 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Object = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SByte = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Single = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        String = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Time = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UInt16 = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UInt32 = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UInt64 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VarNumeric = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AnsiStringFixedLength = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StringFixedLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xml = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateTime2 = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateTimeOffset = 27,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="mockedCall", Namespace="http://schemas.datacontract.org/2004/07/hypervisors")]
    [System.SerializableAttribute()]
    public partial class mockedCall : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string functionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string functionName {
            get {
                return this.functionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.functionNameField, value) != true)) {
                    this.functionNameField = value;
                    this.RaisePropertyChanged("functionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((this.timestampField.Equals(value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="userAddRequest", Namespace="http://schemas.datacontract.org/2004/07/createDisks")]
    [System.SerializableAttribute()]
    public partial class userAddRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isAdministratorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isAdministrator {
            get {
                return this.isAdministratorField;
            }
            set {
                if ((this.isAdministratorField.Equals(value) != true)) {
                    this.isAdministratorField = value;
                    this.RaisePropertyChanged("isAdministrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="bladeDirectorDebugSvc.IDebugServices")]
    public interface IDebugServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/initWithBladesFromIPList", ReplyAction="http://tempuri.org/IDebugServices/initWithBladesFromIPListResponse")]
        void initWithBladesFromIPList(string[] bladeIPs, bool useMockedManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/initWithBladesFromBladeSpec", ReplyAction="http://tempuri.org/IDebugServices/initWithBladesFromBladeSpecResponse")]
        void initWithBladesFromBladeSpec(bladeDirector.bladeDirectorDebugSvc.bladeSpec[] spec, bool useMockedManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/createBladeSpec", ReplyAction="http://tempuri.org/IDebugServices/createBladeSpecResponse")]
        bladeDirector.bladeDirectorDebugSvc.bladeSpec createBladeSpec(string newBladeIP, string newISCSIIP, string newILOIP, ushort newILOPort, bool newCurrentlyHavingBIOSDeployed, bladeDirector.bladeDirectorDebugSvc.VMDeployStatus newVMDeployState, string newCurrentBIOS, bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessRead, bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_logIn", ReplyAction="http://tempuri.org/IDebugServices/_logInResponse")]
        bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _logIn(string requestorIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_getNASEventsIfMocked", ReplyAction="http://tempuri.org/IDebugServices/_getNASEventsIfMockedResponse")]
        bladeDirector.bladeDirectorDebugSvc.mockedCall[] _getNASEventsIfMocked();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_setExecutionResultsIfMocked", ReplyAction="http://tempuri.org/IDebugServices/_setExecutionResultsIfMockedResponse")]
        void _setExecutionResultsIfMocked(bladeDirector.bladeDirectorDebugSvc.mockedExecutionResponses respType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_setBIOSOperationTimeIfMocked", ReplyAction="http://tempuri.org/IDebugServices/_setBIOSOperationTimeIfMockedResponse")]
        void _setBIOSOperationTimeIfMocked(int operationTimeSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_rebootAndStartReadingBIOSConfiguration", ReplyAction="http://tempuri.org/IDebugServices/_rebootAndStartReadingBIOSConfigurationResponse" +
            "")]
        bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _rebootAndStartReadingBIOSConfiguration(string requestorIP, string nodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_rebootAndStartDeployingBIOSToBlade", ReplyAction="http://tempuri.org/IDebugServices/_rebootAndStartDeployingBIOSToBladeResponse")]
        bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _rebootAndStartDeployingBIOSToBlade(string requestorIP, string nodeIP, string BIOSXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_RequestAnySingleNode", ReplyAction="http://tempuri.org/IDebugServices/_RequestAnySingleNodeResponse")]
        bladeDirector.bladeDirectorDebugSvc.resultAndBladeName _RequestAnySingleNode(string requestorIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_GetBladeStatus", ReplyAction="http://tempuri.org/IDebugServices/_GetBladeStatusResponse")]
        bladeDirector.bladeDirectorDebugSvc.GetBladeStatusResult _GetBladeStatus(string requestorIP, string nodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_isBladeMine", ReplyAction="http://tempuri.org/IDebugServices/_isBladeMineResponse")]
        bool _isBladeMine(string requestorIP, string clientIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_ReleaseBladeOrVM", ReplyAction="http://tempuri.org/IDebugServices/_ReleaseBladeOrVMResponse")]
        bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _ReleaseBladeOrVM(string requestorIP, string nodeIP, bool force);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_keepAlive", ReplyAction="http://tempuri.org/IDebugServices/_keepAliveResponse")]
        void _keepAlive(string requestorIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/_requestAnySingleVM", ReplyAction="http://tempuri.org/IDebugServices/_requestAnySingleVMResponse")]
        bladeDirector.bladeDirectorDebugSvc.resultAndBladeName _requestAnySingleVM(string requestorIP, bladeDirector.bladeDirectorDebugSvc.VMHardwareSpec hwSpec, bladeDirector.bladeDirectorDebugSvc.VMSoftwareSpec swSpec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugServices/setKeepAliveTimeout", ReplyAction="http://tempuri.org/IDebugServices/setKeepAliveTimeoutResponse")]
        void setKeepAliveTimeout(int newTimeoutSeconds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDebugServicesChannel : bladeDirector.bladeDirectorDebugSvc.IDebugServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DebugServicesClient : System.ServiceModel.ClientBase<bladeDirector.bladeDirectorDebugSvc.IDebugServices>, bladeDirector.bladeDirectorDebugSvc.IDebugServices {
        
        public DebugServicesClient() {
        }
        
        public DebugServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DebugServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DebugServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DebugServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void initWithBladesFromIPList(string[] bladeIPs, bool useMockedManager) {
            base.Channel.initWithBladesFromIPList(bladeIPs, useMockedManager);
        }
        
        public void initWithBladesFromBladeSpec(bladeDirector.bladeDirectorDebugSvc.bladeSpec[] spec, bool useMockedManager) {
            base.Channel.initWithBladesFromBladeSpec(spec, useMockedManager);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.bladeSpec createBladeSpec(string newBladeIP, string newISCSIIP, string newILOIP, ushort newILOPort, bool newCurrentlyHavingBIOSDeployed, bladeDirector.bladeDirectorDebugSvc.VMDeployStatus newVMDeployState, string newCurrentBIOS, bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessRead, bladeDirector.bladeDirectorDebugSvc.bladeLockType permittedAccessWrite) {
            return base.Channel.createBladeSpec(newBladeIP, newISCSIIP, newILOIP, newILOPort, newCurrentlyHavingBIOSDeployed, newVMDeployState, newCurrentBIOS, permittedAccessRead, permittedAccessWrite);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _logIn(string requestorIP) {
            return base.Channel._logIn(requestorIP);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.mockedCall[] _getNASEventsIfMocked() {
            return base.Channel._getNASEventsIfMocked();
        }
        
        public void _setExecutionResultsIfMocked(bladeDirector.bladeDirectorDebugSvc.mockedExecutionResponses respType) {
            base.Channel._setExecutionResultsIfMocked(respType);
        }
        
        public void _setBIOSOperationTimeIfMocked(int operationTimeSeconds) {
            base.Channel._setBIOSOperationTimeIfMocked(operationTimeSeconds);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _rebootAndStartReadingBIOSConfiguration(string requestorIP, string nodeIP) {
            return base.Channel._rebootAndStartReadingBIOSConfiguration(requestorIP, nodeIP);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _rebootAndStartDeployingBIOSToBlade(string requestorIP, string nodeIP, string BIOSXML) {
            return base.Channel._rebootAndStartDeployingBIOSToBlade(requestorIP, nodeIP, BIOSXML);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.resultAndBladeName _RequestAnySingleNode(string requestorIP) {
            return base.Channel._RequestAnySingleNode(requestorIP);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.GetBladeStatusResult _GetBladeStatus(string requestorIP, string nodeIP) {
            return base.Channel._GetBladeStatus(requestorIP, nodeIP);
        }
        
        public bool _isBladeMine(string requestorIP, string clientIP) {
            return base.Channel._isBladeMine(requestorIP, clientIP);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.resultAndWaitToken _ReleaseBladeOrVM(string requestorIP, string nodeIP, bool force) {
            return base.Channel._ReleaseBladeOrVM(requestorIP, nodeIP, force);
        }
        
        public void _keepAlive(string requestorIP) {
            base.Channel._keepAlive(requestorIP);
        }
        
        public bladeDirector.bladeDirectorDebugSvc.resultAndBladeName _requestAnySingleVM(string requestorIP, bladeDirector.bladeDirectorDebugSvc.VMHardwareSpec hwSpec, bladeDirector.bladeDirectorDebugSvc.VMSoftwareSpec swSpec) {
            return base.Channel._requestAnySingleVM(requestorIP, hwSpec, swSpec);
        }
        
        public void setKeepAliveTimeout(int newTimeoutSeconds) {
            base.Channel.setKeepAliveTimeout(newTimeoutSeconds);
        }
    }
}
