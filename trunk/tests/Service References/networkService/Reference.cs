//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tests.networkService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="networkService.servicesSoap")]
    public interface servicesSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/keepAlive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void keepAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/keepAlive", ReplyAction="*")]
        System.Threading.Tasks.Task keepAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListNodes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ListNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListNodes", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ListNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getBladesByAllocatedServer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getBladesByAllocatedServer(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getBladesByAllocatedServer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getBladesByAllocatedServerAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestAnySingleNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.resultCodeAndBladeName RequestAnySingleNode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestAnySingleNode", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.resultCodeAndBladeName> RequestAnySingleNodeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RequestNode(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestNode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RequestNodeAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBladeStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBladeStatus(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBladeStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBladeStatusAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBladeMine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool isBladeMine(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBladeMine", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> isBladeMineAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/releaseBlade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string releaseBlade(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/releaseBlade", ReplyAction="*")]
        System.Threading.Tasks.Task<string> releaseBladeAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/forceBladeAllocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string forceBladeAllocation(string NodeIP, string newOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/forceBladeAllocation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> forceBladeAllocationAsync(string NodeIP, string newOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getConfigurationOfBlade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.bladeSpec getConfigurationOfBlade(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getConfigurationOfBlade", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.bladeSpec> getConfigurationOfBladeAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCurrentSnapshotForBlade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getCurrentSnapshotForBlade(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCurrentSnapshotForBlade", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getCurrentSnapshotForBladeAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/selectSnapshotForBlade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.resultCode selectSnapshotForBlade(string NodeIP, string snapshotName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/selectSnapshotForBlade", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.resultCode> selectSnapshotForBladeAsync(string NodeIP, string snapshotName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getLastDeployedBIOSForBlade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getLastDeployedBIOSForBlade(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getLastDeployedBIOSForBlade", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getLastDeployedBIOSForBladeAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/rebootAndStartDeployingBIOSToBlade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.resultCode rebootAndStartDeployingBIOSToBlade(string NodeIP, string BIOSXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/rebootAndStartDeployingBIOSToBlade", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.resultCode> rebootAndStartDeployingBIOSToBladeAsync(string NodeIP, string BIOSXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/rebootAndStartReadingBIOSConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.resultCode rebootAndStartReadingBIOSConfiguration(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/rebootAndStartReadingBIOSConfiguration", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.resultCode> rebootAndStartReadingBIOSConfigurationAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkBIOSDeployProgress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.resultCode checkBIOSDeployProgress(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkBIOSDeployProgress", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.resultCode> checkBIOSDeployProgressAsync(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkBIOSReadProgress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        tests.networkService.resultCodeAndBIOSConfig checkBIOSReadProgress(string NodeIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkBIOSReadProgress", ReplyAction="*")]
        System.Threading.Tasks.Task<tests.networkService.resultCodeAndBIOSConfig> checkBIOSReadProgressAsync(string NodeIP);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class resultCodeAndBladeName : object, System.ComponentModel.INotifyPropertyChanged {
        
        private resultCode codeField;
        
        private string bladeNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public resultCode code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
                this.RaisePropertyChanged("code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string bladeName {
            get {
                return this.bladeNameField;
            }
            set {
                this.bladeNameField = value;
                this.RaisePropertyChanged("bladeName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum resultCode {
        
        /// <remarks/>
        success,
        
        /// <remarks/>
        bladeNotFound,
        
        /// <remarks/>
        bladeInUse,
        
        /// <remarks/>
        bladeQueueFull,
        
        /// <remarks/>
        pending,
        
        /// <remarks/>
        alreadyInProgress,
        
        /// <remarks/>
        genericFail,
        
        /// <remarks/>
        noNeedLah,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class resultCodeAndBIOSConfig : object, System.ComponentModel.INotifyPropertyChanged {
        
        private resultCode codeField;
        
        private string bIOSConfigField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public resultCode code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
                this.RaisePropertyChanged("code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BIOSConfig {
            get {
                return this.bIOSConfigField;
            }
            set {
                this.bIOSConfigField = value;
                this.RaisePropertyChanged("BIOSConfig");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(bladeOwnership))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class bladeSpec : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string iscsiIPField;
        
        private string bladeIPField;
        
        private string iLOIPField;
        
        private ushort iLOPortField;
        
        private string currentSnapshotField;
        
        private bool currentlyHavingBIOSDeployedField;
        
        private string lastDeployedBIOSField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string iscsiIP {
            get {
                return this.iscsiIPField;
            }
            set {
                this.iscsiIPField = value;
                this.RaisePropertyChanged("iscsiIP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string bladeIP {
            get {
                return this.bladeIPField;
            }
            set {
                this.bladeIPField = value;
                this.RaisePropertyChanged("bladeIP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string iLOIP {
            get {
                return this.iLOIPField;
            }
            set {
                this.iLOIPField = value;
                this.RaisePropertyChanged("iLOIP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ushort iLOPort {
            get {
                return this.iLOPortField;
            }
            set {
                this.iLOPortField = value;
                this.RaisePropertyChanged("iLOPort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string currentSnapshot {
            get {
                return this.currentSnapshotField;
            }
            set {
                this.currentSnapshotField = value;
                this.RaisePropertyChanged("currentSnapshot");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool currentlyHavingBIOSDeployed {
            get {
                return this.currentlyHavingBIOSDeployedField;
            }
            set {
                this.currentlyHavingBIOSDeployedField = value;
                this.RaisePropertyChanged("currentlyHavingBIOSDeployed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string lastDeployedBIOS {
            get {
                return this.lastDeployedBIOSField;
            }
            set {
                this.lastDeployedBIOSField = value;
                this.RaisePropertyChanged("lastDeployedBIOS");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class bladeOwnership : bladeSpec {
        
        private long bladeIDField;
        
        private bladeStatus stateField;
        
        private string currentOwnerField;
        
        private string nextOwnerField;
        
        private System.DateTime lastKeepAliveField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long bladeID {
            get {
                return this.bladeIDField;
            }
            set {
                this.bladeIDField = value;
                this.RaisePropertyChanged("bladeID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bladeStatus state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string currentOwner {
            get {
                return this.currentOwnerField;
            }
            set {
                this.currentOwnerField = value;
                this.RaisePropertyChanged("currentOwner");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string nextOwner {
            get {
                return this.nextOwnerField;
            }
            set {
                this.nextOwnerField = value;
                this.RaisePropertyChanged("nextOwner");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime lastKeepAlive {
            get {
                return this.lastKeepAliveField;
            }
            set {
                this.lastKeepAliveField = value;
                this.RaisePropertyChanged("lastKeepAlive");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum bladeStatus {
        
        /// <remarks/>
        unused,
        
        /// <remarks/>
        releaseRequested,
        
        /// <remarks/>
        inUse,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface servicesSoapChannel : tests.networkService.servicesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class servicesSoapClient : System.ServiceModel.ClientBase<tests.networkService.servicesSoap>, tests.networkService.servicesSoap {
        
        public servicesSoapClient() {
        }
        
        public servicesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public servicesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public servicesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public servicesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void keepAlive() {
            base.Channel.keepAlive();
        }
        
        public System.Threading.Tasks.Task keepAliveAsync() {
            return base.Channel.keepAliveAsync();
        }
        
        public string ListNodes() {
            return base.Channel.ListNodes();
        }
        
        public System.Threading.Tasks.Task<string> ListNodesAsync() {
            return base.Channel.ListNodesAsync();
        }
        
        public string getBladesByAllocatedServer(string NodeIP) {
            return base.Channel.getBladesByAllocatedServer(NodeIP);
        }
        
        public System.Threading.Tasks.Task<string> getBladesByAllocatedServerAsync(string NodeIP) {
            return base.Channel.getBladesByAllocatedServerAsync(NodeIP);
        }
        
        public tests.networkService.resultCodeAndBladeName RequestAnySingleNode() {
            return base.Channel.RequestAnySingleNode();
        }
        
        public System.Threading.Tasks.Task<tests.networkService.resultCodeAndBladeName> RequestAnySingleNodeAsync() {
            return base.Channel.RequestAnySingleNodeAsync();
        }
        
        public string RequestNode(string NodeIP) {
            return base.Channel.RequestNode(NodeIP);
        }
        
        public System.Threading.Tasks.Task<string> RequestNodeAsync(string NodeIP) {
            return base.Channel.RequestNodeAsync(NodeIP);
        }
        
        public string GetBladeStatus(string NodeIP) {
            return base.Channel.GetBladeStatus(NodeIP);
        }
        
        public System.Threading.Tasks.Task<string> GetBladeStatusAsync(string NodeIP) {
            return base.Channel.GetBladeStatusAsync(NodeIP);
        }
        
        public bool isBladeMine(string NodeIP) {
            return base.Channel.isBladeMine(NodeIP);
        }
        
        public System.Threading.Tasks.Task<bool> isBladeMineAsync(string NodeIP) {
            return base.Channel.isBladeMineAsync(NodeIP);
        }
        
        public string releaseBlade(string NodeIP) {
            return base.Channel.releaseBlade(NodeIP);
        }
        
        public System.Threading.Tasks.Task<string> releaseBladeAsync(string NodeIP) {
            return base.Channel.releaseBladeAsync(NodeIP);
        }
        
        public string forceBladeAllocation(string NodeIP, string newOwner) {
            return base.Channel.forceBladeAllocation(NodeIP, newOwner);
        }
        
        public System.Threading.Tasks.Task<string> forceBladeAllocationAsync(string NodeIP, string newOwner) {
            return base.Channel.forceBladeAllocationAsync(NodeIP, newOwner);
        }
        
        public tests.networkService.bladeSpec getConfigurationOfBlade(string NodeIP) {
            return base.Channel.getConfigurationOfBlade(NodeIP);
        }
        
        public System.Threading.Tasks.Task<tests.networkService.bladeSpec> getConfigurationOfBladeAsync(string NodeIP) {
            return base.Channel.getConfigurationOfBladeAsync(NodeIP);
        }
        
        public string getCurrentSnapshotForBlade(string NodeIP) {
            return base.Channel.getCurrentSnapshotForBlade(NodeIP);
        }
        
        public System.Threading.Tasks.Task<string> getCurrentSnapshotForBladeAsync(string NodeIP) {
            return base.Channel.getCurrentSnapshotForBladeAsync(NodeIP);
        }
        
        public tests.networkService.resultCode selectSnapshotForBlade(string NodeIP, string snapshotName) {
            return base.Channel.selectSnapshotForBlade(NodeIP, snapshotName);
        }
        
        public System.Threading.Tasks.Task<tests.networkService.resultCode> selectSnapshotForBladeAsync(string NodeIP, string snapshotName) {
            return base.Channel.selectSnapshotForBladeAsync(NodeIP, snapshotName);
        }
        
        public string getLastDeployedBIOSForBlade(string NodeIP) {
            return base.Channel.getLastDeployedBIOSForBlade(NodeIP);
        }
        
        public System.Threading.Tasks.Task<string> getLastDeployedBIOSForBladeAsync(string NodeIP) {
            return base.Channel.getLastDeployedBIOSForBladeAsync(NodeIP);
        }
        
        public tests.networkService.resultCode rebootAndStartDeployingBIOSToBlade(string NodeIP, string BIOSXML) {
            return base.Channel.rebootAndStartDeployingBIOSToBlade(NodeIP, BIOSXML);
        }
        
        public System.Threading.Tasks.Task<tests.networkService.resultCode> rebootAndStartDeployingBIOSToBladeAsync(string NodeIP, string BIOSXML) {
            return base.Channel.rebootAndStartDeployingBIOSToBladeAsync(NodeIP, BIOSXML);
        }
        
        public tests.networkService.resultCode rebootAndStartReadingBIOSConfiguration(string NodeIP) {
            return base.Channel.rebootAndStartReadingBIOSConfiguration(NodeIP);
        }
        
        public System.Threading.Tasks.Task<tests.networkService.resultCode> rebootAndStartReadingBIOSConfigurationAsync(string NodeIP) {
            return base.Channel.rebootAndStartReadingBIOSConfigurationAsync(NodeIP);
        }
        
        public tests.networkService.resultCode checkBIOSDeployProgress(string NodeIP) {
            return base.Channel.checkBIOSDeployProgress(NodeIP);
        }
        
        public System.Threading.Tasks.Task<tests.networkService.resultCode> checkBIOSDeployProgressAsync(string NodeIP) {
            return base.Channel.checkBIOSDeployProgressAsync(NodeIP);
        }
        
        public tests.networkService.resultCodeAndBIOSConfig checkBIOSReadProgress(string NodeIP) {
            return base.Channel.checkBIOSReadProgress(NodeIP);
        }
        
        public System.Threading.Tasks.Task<tests.networkService.resultCodeAndBIOSConfig> checkBIOSReadProgressAsync(string NodeIP) {
            return base.Channel.checkBIOSReadProgressAsync(NodeIP);
        }
    }
}
