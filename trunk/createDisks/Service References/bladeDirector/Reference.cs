//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace createDisks.bladeDirector {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultAndWaitToken", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(createDisks.bladeDirector.resultAndBIOSConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(createDisks.bladeDirector.resultAndBladeName))]
    public partial class resultAndWaitToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private createDisks.bladeDirector.result resultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string waitTokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public createDisks.bladeDirector.result result {
            get {
                return this.resultField;
            }
            set {
                if ((object.ReferenceEquals(this.resultField, value) != true)) {
                    this.resultField = value;
                    this.RaisePropertyChanged("result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string waitToken {
            get {
                return this.waitTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.waitTokenField, value) != true)) {
                    this.waitTokenField = value;
                    this.RaisePropertyChanged("waitToken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="result", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private createDisks.bladeDirector.resultCode codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string errMsgField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public createDisks.bladeDirector.resultCode code {
            get {
                return this.codeField;
            }
            set {
                if ((this.codeField.Equals(value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errMsg {
            get {
                return this.errMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.errMsgField, value) != true)) {
                    this.errMsgField = value;
                    this.RaisePropertyChanged("errMsg");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultAndBIOSConfig", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class resultAndBIOSConfig : createDisks.bladeDirector.resultAndWaitToken {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BIOSConfigField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BIOSConfig {
            get {
                return this.BIOSConfigField;
            }
            set {
                if ((object.ReferenceEquals(this.BIOSConfigField, value) != true)) {
                    this.BIOSConfigField = value;
                    this.RaisePropertyChanged("BIOSConfig");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultAndBladeName", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class resultAndBladeName : createDisks.bladeDirector.resultAndWaitToken {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string bladeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string bladeName {
            get {
                return this.bladeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.bladeNameField, value) != true)) {
                    this.bladeNameField = value;
                    this.RaisePropertyChanged("bladeName");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="resultCode", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum resultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeInUse = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeQueueFull = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pending = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        alreadyInProgress = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cancelled = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        genericFail = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        noNeedLah = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        unknown = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetBladeStatusResult", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    public enum GetBladeStatusResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        bladeNotFound = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        unused = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        yours = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        releasePending = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        notYours = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMHardwareSpec", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class VMHardwareSpec : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cpuCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int memoryMBField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cpuCount {
            get {
                return this.cpuCountField;
            }
            set {
                if ((this.cpuCountField.Equals(value) != true)) {
                    this.cpuCountField = value;
                    this.RaisePropertyChanged("cpuCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int memoryMB {
            get {
                return this.memoryMBField;
            }
            set {
                if ((this.memoryMBField.Equals(value) != true)) {
                    this.memoryMBField = value;
                    this.RaisePropertyChanged("memoryMB");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMSoftwareSpec", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class VMSoftwareSpec : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string debuggerHostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string debuggerKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort debuggerPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private createDisks.bladeDirector.userAddRequest[] usersToAddField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string debuggerHost {
            get {
                return this.debuggerHostField;
            }
            set {
                if ((object.ReferenceEquals(this.debuggerHostField, value) != true)) {
                    this.debuggerHostField = value;
                    this.RaisePropertyChanged("debuggerHost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string debuggerKey {
            get {
                return this.debuggerKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.debuggerKeyField, value) != true)) {
                    this.debuggerKeyField = value;
                    this.RaisePropertyChanged("debuggerKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort debuggerPort {
            get {
                return this.debuggerPortField;
            }
            set {
                if ((this.debuggerPortField.Equals(value) != true)) {
                    this.debuggerPortField = value;
                    this.RaisePropertyChanged("debuggerPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public createDisks.bladeDirector.userAddRequest[] usersToAdd {
            get {
                return this.usersToAddField;
            }
            set {
                if ((object.ReferenceEquals(this.usersToAddField, value) != true)) {
                    this.usersToAddField = value;
                    this.RaisePropertyChanged("usersToAdd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="userAddRequest", Namespace="http://schemas.datacontract.org/2004/07/createDisks")]
    [System.SerializableAttribute()]
    public partial class userAddRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isAdministratorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isAdministrator {
            get {
                return this.isAdministratorField;
            }
            set {
                if ((this.isAdministratorField.Equals(value) != true)) {
                    this.isAdministratorField = value;
                    this.RaisePropertyChanged("isAdministrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="bladeOwnership", Namespace="http://schemas.datacontract.org/2004/07/bladeDirectorWCF")]
    [System.SerializableAttribute()]
    public partial class bladeOwnership {
    }
}
